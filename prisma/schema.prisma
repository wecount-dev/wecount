generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  aud                  String    @db.VarChar(255)
  confirmation_sent_at DateTime?
  recovery_sent_at     DateTime?
  email                String?   @db.VarChar(255)
  phone                String?   @db.VarChar(255)
  avatarUrl            String?   @db.VarChar(255)
  avatarUrlThumb       String?   @db.VarChar(255)
  displayName          String?   @db.VarChar(255)
  name                 String?   @db.VarChar(255)

  created_at         DateTime  @default(now())
  updated_at         DateTime? @default(now())
  confirmed_at       DateTime?
  email_confirmed_at DateTime?
  phone_confirmed_at DateTime?
  last_sign_in_at    DateTime?
  role               String?   @db.VarChar(255)

  Permission Permission[]
  Deposit    Deposit[]
  Feed       Feed[]
  Reply      Reply[]
  Reaction   Reaction[]
  Image      Image[]
}

model Community {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  isPublic    Boolean?
  name        String   @db.VarChar(50)
  description String
  currency    String   @db.VarChar(4)
  color       String?  @default("#28DB98")

  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now())
  deletedAt DateTime?

  Permission Permission[]
  Topic      Topic[]
  Deposit    Deposit[]
  Category   Category[]
  CreditCard CreditCard[]
  Feed       Feed[]
  Reply      Reply[]
  Image      Image[]
  Tag        Tag[]
}

enum PermissionType {
  owner
  admin
  member
}

model Permission {
  type      PermissionType
  accepted  Boolean?       @default(false)
  createdAt DateTime       @default(now())

  userId      String    @db.Uuid
  user        User      @relation(fields: [userId], references: [id])
  communityId String    @db.Uuid
  community   Community @relation(fields: [communityId], references: [id])

  @@unique([userId, communityId])
}

enum DepositType {
  sponsoring
  deposit
}

enum PaymentType {
  onetime
  subscription
}

enum SubscriptionPeriodUnit {
  day
  week
  month
  year
}

model Topic {
  id      String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name    String  @db.VarChar(255)
  iconUrl String?

  communityId String    @db.Uuid
  community   Community @relation(fields: [communityId], references: [id])

  Deposit Deposit[]
}

model Deposit {
  id                     String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  depositType            DepositType             @default(sponsoring)
  paymentType            PaymentType             @default(onetime)
  title                  String                  @db.VarChar(255)
  description            String?
  price                  Float
  localizedPrice         String                  @db.VarChar(50)
  currency               String                  @db.VarChar(10)
  subscriptionPeriodUnit SubscriptionPeriodUnit?
  subscriptionPeriod     Int?                    @db.SmallInt
  createdAt              DateTime?               @default(now())
  updatedAt              DateTime?               @default(now()) @updatedAt
  deletedAt              DateTime?

  userId      String?    @db.Uuid
  user        User?      @relation(fields: [userId], references: [id])
  communityId String?    @db.Uuid
  community   Community? @relation(fields: [communityId], references: [id])
  topicId     String?    @db.Uuid
  topic       Topic?     @relation(fields: [topicId], references: [id])
}

model Category {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  color       String    @default("#AAAAAA")
  name        String    @db.VarChar(255)
  iconUrl     String?   @db.VarChar(1024)
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now()) @updatedAt

  Feed Feed[]

  communityId String    @db.Uuid
  community   Community @relation(fields: [communityId], references: [id])
}

enum CardType {
  amex
  master
  visa
  discover
}

model CreditCard {
  id                 String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  cardNumber         String?   @db.VarChar(50)
  validDateMonth     String?   @db.VarChar(4)
  validDateYear      String?   @db.VarChar(4)
  twoLetterPassword  String?   @db.VarChar(2)
  registrationNumber String?   @db.VarChar(50)
  description        String?
  cvv                String?   @db.VarChar(4)
  cardType           CardType?
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @default(now()) @updatedAt
  deletedAt          DateTime?

  Feed Feed[]

  communityId String    @db.Uuid
  community   Community @relation(fields: [communityId], references: [id])
}

model Feed {
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  isPublic       Boolean   @default(true)
  title          String    @db.VarChar(255)
  date           DateTime?
  price          Float
  localizedPrice String?   @db.VarChar(255)
  latitude       Float?
  longitude      Float?
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @default(now()) @updatedAt
  deletedAt      DateTime?

  Reply    Reply[]
  Category Category[]
  Reaction Reaction[]
  Image    Image[]
  Tag      Tag[]

  communityId  String      @db.Uuid
  community    Community   @relation(fields: [communityId], references: [id])
  userId       String      @db.Uuid
  user         User        @relation(fields: [userId], references: [id])
  creditCard   CreditCard? @relation(fields: [creditCardId], references: [id])
  creditCardId String?     @db.Uuid
}

model Tag {
  id  String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  tag String @unique @db.VarChar(255)

  community   Community? @relation(fields: [communityId], references: [id])
  communityId String?    @db.Uuid

  feed   Feed?   @relation(fields: [feedId], references: [id])
  feedId String? @db.Uuid

  @@index(tag)
}

model Image {
  id  String @id @default(cuid()) @db.Uuid
  url String

  communityId String?    @db.Uuid
  community   Community? @relation(fields: [communityId], references: [id])
  userId      String?    @db.Uuid
  user        User?      @relation(fields: [userId], references: [id])
  feedId      String?    @db.Uuid
  feed        Feed?      @relation(fields: [feedId], references: [id])
}

enum MessageType {
  text
  photo
  movie
  file
}

model Reply {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  messageType MessageType @default(text)
  photoURL    String?     @db.VarChar(1024)
  movieURL    String?     @db.VarChar(1024)
  fileURL     String?     @db.VarChar(1024)
  text        String?
  createdAt   DateTime?   @default(now())
  updatedAt   DateTime?   @default(now()) @updatedAt

  Reaction Reaction[]

  communityId String?    @db.Uuid
  community   Community? @relation(fields: [communityId], references: [id])
  feedId      String?    @db.Uuid
  feed        Feed?      @relation(fields: [feedId], references: [id])
  userId      String     @db.Uuid
  user        User       @relation(fields: [userId], references: [id])
}

model Reaction {
  id    String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  emoji String @default("ðŸ˜€")

  feedId  String? @db.Uuid
  feed    Feed?   @relation(fields: [feedId], references: [id])
  replyId String? @db.Uuid
  reply   Reply?  @relation(fields: [replyId], references: [id])
  userId  String  @db.Uuid
  user    User    @relation(fields: [userId], references: [id])

  @@unique([replyId, userId, emoji])
  @@unique([feedId, userId, emoji])
}
